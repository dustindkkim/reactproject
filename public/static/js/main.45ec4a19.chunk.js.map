{"version":3,"sources":["config/firebaseConfig.js","firebase/firebase.js","container/book/Book.jsx","container/Home/home.jsx","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","db","KEY","googleBookApi","Book","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addTobookshelf","item","collection","add","then","console","log","catch","e","_loadBookShelf","get","snapshot","booksInBookShelf","forEach","doc","book","data","id","push","setState","_loadedBookApi","asyncToGenerator","regenerator_default","a","mark","_callee","books","wrap","_context","prev","next","axios","params","q","state","search","key","res","items","sent","bookList","isLoaded","stop","handleChange","target","value","bind","assertThisInitialized","_this2","react_default","createElement","type","onChange","onClick","map","index","style","marginBottom","volumeInfo","title","Component","home","Header","react_router_dom","to","App","components_Header","react_router","path","exact","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45ec4a19.chunk.js","sourcesContent":["var firebaseConfig = {\n    apiKey: \"AIzaSyDGmQwAw3z3Hx4YmxYbipJSfsPLdKTtQT8\",\n    authDomain: \"temptest-5cb17.firebaseapp.com\",\n    databaseURL: \"https://temptest-5cb17.firebaseio.com\",\n    projectId: \"temptest-5cb17\",\n    storageBucket: \"\",\n    messagingSenderId: \"203438545412\",\n    appId: \"1:203438545412:web:ec02cea9198775a7\"\n  };\n  // Initialize Firebase\n\n  export default firebaseConfig","import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport firebaseConfig from '../config/firebaseConfig'\n\nfirebase.initializeApp(firebaseConfig);\n\nconst db = firebase.firestore();\n\nexport {\n    firebase,\n    db\n}","import React, { Component } from 'react';\nimport axios from 'axios'\nimport { BrowserRouter as Router, Route, Link, NavLink } from \"react-router-dom\";\nimport {firebase, db} from '../../firebase/firebase'\n\n\n\nconst KEY = 'AIzaSyCOzd1_xZM1AOhL1HQ1JOMzTRKAy9F7pZs';\nconst googleBookApi = 'https://www.googleapis.com/books/v1/volumes'\n\n\nclass Book extends Component {\n\n    constructor(props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this)\n        this.state = {\n            isLoaded: false,\n            bookList: [],\n            search: '',\n            booksInBookShelf: []\n        }\n    }\n\n    componentDidMount() {\n        console.log(firebase)\n        this._loadBookShelf()\n    }\n\n    // bookListenserTofirestore = () => {\n    //     db.collection('test')\n    //     .onSnapshot(snapshot => {\n    //         console.log(snapshot)\n    //         let booksInBookShelf = [];\n    //         snapshot.forEach(doc => {\n    //             let book = doc.data();\n    //             book.id = doc.id;\n    //             booksInBookShelft.push(book)\n    //         })\n    //         console.log(booksInBookShelf)\n    //     })\n    // }\n\n    addTobookshelf = item => {\n        db.collection('test')\n        .add(item)\n        .then((item) => {\n            console.log(item)\n        })\n        .catch(e=> {\n            console.log(e)\n        })\n    }\n\n    _loadBookShelf = () => {\n        db.collection('test')\n        .get()\n        .then(snapshot => {\n            let booksInBookShelf = [];\n            snapshot.forEach(doc => {\n                let book = doc.data();\n                book.id = doc.id;\n                booksInBookShelf.push(book)\n            })\n            console.log(booksInBookShelf)\n            this.setState({\n                booksInBookShelf: booksInBookShelf\n        })\n    })\n    }\n\n    _loadedBookApi = async () => {\n        const books = await axios.get(googleBookApi, {\n            params: {\n                q: this.state.search,\n                key: KEY\n            }\n        })\n        .then( (res) => {\n            console.log(res.data.items)\n            return res.data.items\n        })\n        .catch(e => {\n            console.log(e)\n        })\n\n        if(books) {\n            this.setState({\n                bookList: books,\n                isLoaded: true\n            })\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            search: e.target.value\n        })\n    }\n    \n    render() {\n        return (\n            <div>\n            <input \n                type=\"text\"\n                onChange={this.handleChange}\n                    />\n            <button onClick={this._loadedBookApi}>Search</button>\n            <div>\n                {\n                    this.state.bookList.map((item, index) => {\n                        return (\n                            <div key={index} style={{marginBottom:'10px'}}>\n                                {item.volumeInfo.title}\n                                <button onClick={() => this.addTobookshelf(item)}>책장에 추가</button>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default Book;","import React, { Component } from 'react';\n\nclass home extends Component {\n    render() {\n        return (\n            <div>\n                홈이당\n            </div>\n        );\n    }\n}\n\nexport default home;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, NavLink } from \"react-router-dom\";\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <div>\n                <nav>\n                    <NavLink to=\"/\">홈</NavLink>\n                    <NavLink to=\"/book\" >북</NavLink>\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport Book from './container/book/Book'\nimport Home from './container/Home/home'\nimport Header from './components/Header'\nimport { BrowserRouter as Router, Route, Link, NavLink } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <Header />\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/book\" component={Book} />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}